---
swagger: "2.0"
info:
  description: "# Introduction\nThe Rebilly API is built on HTTP. Our API is RESTful. It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. You can use your favorite HTTP/REST library for your programming language to use Rebilly's API, or you can use one of our SDKs (currently available in PHP and Javascript).\n\n<table border=1>\n  <tr>\n    <td> this is cell 1 </td>\n    <td>this is cell 2  </td>\n  </tr>\n</table>\nWe have other APIs that are also available. Every action from our app is supported by an API which is documented and available for use so that you may automate any workflows necessary. This document contains the most commonly integrated resources.\n# Available authentication methods\n\n  Webhook Relay offers three forms of authentication:\n  - **Basic Auth** - only available for non-OAuth accounts. Use your username and password.\n  - **API Key** - available for all accounts, token pairs can be generated [here](https://my.webhookrelay.com/tokens)\n  - **JWT** - mainly used by the [admin dashboard](https://my.webhookrelay.com) with a 'Authorization Bearer: token\n  \n"
  version: 1.0.0
  title: Simple_Blog
host: virtserver.swaggerhub.com
basePath: /tahirshahzad/BlogAPI/1.0.0
schemes:
- https
produces:
- application/json
paths:
  /posts:
    get:
      summary: Get all the posts
      description: This will return all the posts available in the blog
      parameters: []
      responses:
        200:
          description: An array of Posts
          schema:
            type: array
            items:
              $ref: '#/definitions/post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
    post:
      summary: Create a post
      description: This will create a new post based on the provided JSON in body
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: post
        description: The properties of the post to be created
        required: true
        schema:
          $ref: '#/definitions/newpost'
      responses:
        200:
          description: An array of Posts
          schema:
            type: array
            items:
              $ref: '#/definitions/post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
  /posts/{id}:
    get:
      summary: Get a specified post
      description: This will return the specified post available in the blog
      parameters:
      - name: id
        in: path
        description: Id of the post which is to be fetched
        required: true
        type: number
        format: int
      responses:
        200:
          description: The post being specified
          schema:
            type: array
            items:
              $ref: '#/definitions/post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/error'
    delete:
      summary: Delete a post
      description: This endpoint allows to delete a post
      parameters:
      - name: id
        in: path
        description: Id of the post to be deleted
        required: true
        type: number
        format: int
      responses:
        200:
          description: OK
definitions:
  post:
    type: object
    properties:
      id:
        type: number
        description: This will be the identifier of the Post
      title:
        type: string
        description: Title of the post
      body:
        type: string
        description: Contents of the post
      userId:
        type: number
        description: Id of the user who created the post
  newpost:
    type: object
    properties:
      title:
        type: string
        description: Title of the post
      body:
        type: string
        description: Contents of the post
      userId:
        type: number
        description: Id of the user who created the post
  error:
    type: object
    properties:
      code:
        type: number
        description: Error code to be displayed
      Message:
        type: string
        description: Detailed description of the error occured
